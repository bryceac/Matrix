=Matrix=

'''Description:''' A Library to create Matrixes easilly, regardless of Operating system.

'''Version:''' 0.1

'''Author:''' Bryce C.

==Notes==

This was tested with Swift 5.2, <strong>should</strong> work with Swift 5.1 too. Anything earlier than 5.1 is not guaranteed to work.

===Questions===

<ol>
<li>
<dl>
<dt span=fontweight:bold">Why create yet another Matrix library?</dt>
<dd>
<p>While many Matrix libraries exist, many specializing in the mathematically, there were not any good enough to be useable for things like Sudoku puzzle, as well as let me learn a bit what it takes to create a collection.</p>
<p>However, since the types defined are all generics, they can be used for other purposes.</p>
</dd>
</dl>
</li>
</ol>

===Features===

<ul>
<li>easy saving to and loading from JSON files.</li>
<li>ability to create matrix of Matrices.</li>
<li>method for to grab particular rows. (only in a matrix of matrices)</li>
<li>subscripts to grab rows and elements in graph=like manner.</li>
<li>methods to grab data from certain columns.</li>
<li>grabbing random elements from matrix.</li>
<li>ability to shuffle matrices and use other methods available to swift collections.</li>
</ul>

===Known Issues===

<ul>
<li>Shuffling matrix of matrices in place does not really shuffle matrix.</li>
</ul>

===Installing===

To be able to use this library, add the repository to the list of dependencies in Swift package.

===Usage===

====Create Matrix====

<pre>
let matrix = Matrix(withRows: 3, columns: 3, andDefaultValue: true)
</pre>

This creates a 3x3 matrix, where all rows and columns have a value of true. The type of the matrix is inferred to be Matrix<Bool>.

====Matrix from 2D array====

<pre>
let block = Matrix(withGrid: [Int](1...9).chunked(into: 3))
</pre>

This creates a matrix with rows and columns determined by the number of arrays and the array with the most elements respectively.

The chunked(into:) method is not native to Swift, but is implemented by extension that is included with the library to turn an array into a 2D array.

====Matrix of Matrices====

While from the above, it is quite simple to create a matrix of matrices (and is certainly possible), this is not the best way to do so, because subscripts and functions would no longer work properly.

Instead, the best thing to do, aside from making a matrix with desired number of rows and columns to begin with, is to use the SuperMatrix class, which has methods to grab particular rows and columns.

Initialization is similar to a regular matrix, but because SuperMatrix expects two generic types (one being the type of Matrix and the holds the type of the object), type cannot be inferred.

As such, a SuperMatrix would be initialized like this:

<pre>
let blocks: SuperMatrix<Matrix<Int>, Int> = SuperMatrix(withGrid: [Matrix<Int>](repeating: block, count: 9).chunked(into: 3))
</pre>

Like a regular Matrix, this will produce a 3x3 matrix, and will contain 9 3x3 matrices.

====Retrieving Rows====

The way to retrieve rows varies, depending on what is desired and being dealt with.

If you are dealing
