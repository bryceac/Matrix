=Matrix=

'''Description:''' A Library to create Matrixes easilly, regardless of Operating system.

'''Version:''' 0.3.2

'''Author:''' Bryce C.

'''License:''' See LICENSE

==Notes==

While this was tested with Swift 5.2, this <strong>should</strong> work with Swift 5.1 too. Anything earlier than 5.1 is not guaranteed to work.

===Version History===

<dl>
<dt span="font-weight:bold">0.3.2</dt>
<dd>
<p>Matrix no longer Codable by default, but is Codable if the contained element conforms to Codable.</p>
</dd>
<dt span="font-weight:bold">0.3.1</dt>
<dd>
<p>Make Matrix.Index strideable, by moving it to its own type.</p>
</dd>
<dt span="font-weight:bold">0.3</dt>
<dd>
<p>change Matrix from a class to a structure, to make copying easier.</p>
<dt span="font-weight: bold">0.2.2</dt>
<dd>make indices hashable.</dd>
<dt span="font-weight: bold">0.2.1</dt>
<dd>convert functions for Matrix of matrices to subscript.</dd>
<dt span="font-weight: bold">0.2</dt>
<dd>Add protocol, to allow functions for nested Matrices, and giving capability without subclassing.</dd>
<dt span="font-weight: bold">0.1</dt>
<dd>Initial release.</dd>
</dl>

===Questions===

<ol>
<li>
<dl>
<dt span="font-weight:bold">Why create yet another Matrix library?</dt>
<dd>
<p>While many Matrix libraries exist, many specializing in the mathematical area, there were not any good enough to be useable for things like Sudoku puzzle, as well as let me learn a bit what it takes to create a collection.</p>
<p>However, since the types defined are all generics, they can be used for other purposes.</p>
</dd>
</dl>
</li>
</ol>

===Features===

<ul>
<li>subscripts to grab rows and elements in graph-like manner.</li>
<li>subscript to grab certain columns.</li>
<li>ability to save and load matrices to and from JSON files.</li>
<li>ability to shuffle matrices and use other methods available to all swift collections.</li>
<li>subscripts to grab certain rows and columns in matrices of matrices. (modified in 0.2.1)</li>
</ul>

===Installing===

To be able to use this library, add the repository to the list of dependencies in your Swift package, like this:

<pre>
.package(url: "https://github.com/bryceac/Matrix", .branch("master"))
</pre>

Add Dependency to Target like this:

<pre>
targets: [
        // Targets are the basic building blocks of a package. A target can define a module or a test suite.
        // Targets can depend on other targets in this package, and on products in packages which this package depends on.
        .target(
            name: "HelloWorld",
            dependencies: ["Matrix"]),
        .testTarget(
            name: "MatrixTests",
            dependencies: ["Matrix"]),
    ]
</pre>

===Usage===

====Create Matrix====

<pre>
let matrix = Matrix(withRows: 3, columns: 3, andDefaultValue: true)
</pre>

This creates a 3x3 matrix, where all rows and columns have a value of true. The type of the matrix is inferred to be Matrix<Bool>.

=====Matrix from 2D array=====

<pre>
let block = Matrix(withGrid: [Int](1...9).chunked(into: 3))
</pre>

This creates a matrix with rows and columns determined by the number of arrays and the array with the most elements respectively.

The '''chunked(into:)''' method is not native to Swift, but is implemented by extension that is included with the library to turn an array into a 2D array.

=====Matrix of Matrices=====

While earlier iterations of this library required a subclass to do this well, this Matrix now works how it should.

As a result, Matrices can be nested like a normal collection type.

As of version 0.3, Matrices are their own objects.

=====Retrieving Rows=====

To retrieve a row from the matrix, all you would need to do is something like this:

<pre>
block[0]
</pre>

Since 2D arrays are the backbone of a Matrix object, matrices also start at 0, rather than 1.

If dealing with a Matrix of matrices, you would do this instead:

<pre>
block[y: 0]
</pre>

In the older iteration, you would have had to know the column count and row count of the nested matrices, but this subscript does the work for you, making it so that it is possible to give an index of 8 to get the 9<sup>th</sup> row.

<strong>The [y:] subscript does not allow modification of elements.</strong> 

=====Retrieving Columns=====

To retrieve a column, you would do it like this:

<pre>
block[column: 0]
</pre>

This will retrieve all elements in the first column of the matrix.

Please note that this subscript cannot be used to manipulate elements to the columns themselves.

If dealing with a Matrix of matrices, you would do this instead:

<pre>
block[x: 0]
</pre>

<p>Like the matrix of matrices row subscript above, this grabs the appropriate column by allowing one to specify something 8 to get the ninth column.</p>

<strong>Also like the matrix of matrices row subscript, the [x:] subscript does not allow elements to be modified.</strong>

=====Retrieving Elements=====

Elements can be retrieved in a number of ways, depending on whether you want a particular object or a random one.

To retrieve a random element from the matrix, you can do something like this:

<pre>
block.randomElement()!
</pre>

To retrieve an element in a particular point, you would do something like this:

<pre>
block[1,1]
</pre>

This will retrieve the second element in the second row.

====Saving & Loading====

If desired, matrices and matrices of matrices can be saved to and loaded from local JSON files.

to load objects, you would do something like this:

<pre>
let DOCUMENTS_DIRECTORY = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!

if let block = try? Matrix<Int>.load(from: DOCUMENTS_DIRECTORY.appendingPathComponent("block").appendingPathExtension("json")) {
    // code to initialize if JSON loads successfully.
}
</pre>

The first line used to work only on Apple platforms, but now works on Ubuntu too.

To save a file, you would do something like this:

<pre>
try? block.save(to: DOCUMENTS_DIRECTORY.appendingPathComponent("block").appendingPathExtension("json"))
</pre>

As can be seen, these functions can throw errors, so it is best not to do things exactly like my example, unless you do not care what the errors are.

===Support===

If support is needed, you should be able to contact me through my <a href="brycecampbell.me">website</a>.

However, though I may be more proficent in Swift now than when I started dabbling with it, I still do not know all the ins and outs, so you may ultimately be on your own anyway.