=Matrix=

'''Description:''' A Library to create Matrixes easilly, regardless of Operating system.

'''Version:''' 0.1

'''Author:''' Bryce C.

==Notes==

This was tested with Swift 5.2, <strong>should</strong> work with Swift 5.1 too. Anything earlier than 5.1 is not guaranteed to work.

===Questions===

<ol>
<li>
<dl>
<dt span=fontweight:bold">Why create yet another Matrix library?</dt>
<dd>
<p>While many Matrix libraries exist, many specializing in the mathematical area, there were not any good enough to be useable for things like Sudoku puzzle, as well as let me learn a bit what it takes to create a collection.</p>
<p>However, since the types defined are all generics, they can be used for other purposes.</p>
</dd>
</dl>
</li>
</ol>

===Features===

<ul>
<li>easy saving to and loading from JSON files.</li>
<li>subscripts to grab rows and elements in graph-like manner.</li>
<li>method to grab data from certain columns.</li>
<li>ability to shuffle matrices and use other methods available to all swift collections.</li>
</ul>

===Installing===

To be able to use this library, add the repository to the list of dependencies in Swift package.

===Usage===

====Create Matrix====

<pre>
let matrix = Matrix(withRows: 3, columns: 3, andDefaultValue: true)
</pre>

This creates a 3x3 matrix, where all rows and columns have a value of true. The type of the matrix is inferred to be Matrix<Bool>.

====Matrix from 2D array====

<pre>
let block = Matrix(withGrid: [Int](1...9).chunked(into: 3))
</pre>

This creates a matrix with rows and columns determined by the number of arrays and the array with the most elements respectively.

The chunked(into:) method is not native to Swift, but is implemented by extension that is included with the library to turn an array into a 2D array.

====Retrieving Rows====

To retrieve a row from the matrix, all you would need to do is something like this:

<pre>
block[0]
</pre>

Since 2D arrays are the backbone of a Matrix object, matrices are also start at 0, rather than 1.

====Retrieving Columns====

To retrieve a column, you would do it like this:

<pre>
block.column(0)
</pre>

This will retrieve all elements in the first column of the matrix.

====Retrieving Elements====

Elements can be retrieved in a number of ways, depending on whether you want a particular object or a random one.

To retrieve a random element from the matrix, you can do something like this:

<pre>
block.randomElement()!
</pre>

To retrieve an element in a particular point, you would do something like this:

<pre>
block[1,1]
</pre>

This will retrieve the second element in the second row.

====Saving and Loading Matrices====

If desired, matrices can be saved to and loaded from a file.

To do this, two methods provided, which are:

<ul>
<li>load(from:)</li>
<li>save(to:)</li>
</ul>

They would be used like this:

<pre>
let DOCUMENTS_DIRECTORY = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!

// try to load Matrix from JSON file in Documents directory
do {
    let block: Matrix<Int> = try load(from: DOCUMENTS_DIRECTORY.appendingPathComponent("block").appendingPathExtension("json")) 
} catc {
    // code to deal with any DecodingError or errors regarding file access.
}
</pre>

First line used to only work on Apple platforms, but has recently been fixed so that it works on Ubuntu.

<pre>
// attempt to save matrix to file
do {
    try block.save(to: DOCUMENTS_DIRECTORY.appendingPathComponent("block").appendingPathExtension("json"))
} catch {
    // code to deal with an EncodingError or errors regarding writing files.
}
</pre>

Both functions utilize Codable under the hood and have their own JSONEncoder and JSONDecoder objects.

The save function automatically formats JSON to be easy to read.

===Tentative Plans===

Currently, nothing is planned to be added or removed, as it is good enough to be used in Sudoku puzzle generation.

However, that does not mean that things will not change in the future, if more functionality is needed